# Author: Lucas Vilas-Boas
# Year: 2025
# Repo: https://github.com/lucoiso/luvk

# ----------- Global Definitions -----------
SET(LIBRARY_NAME luvk)

CMAKE_MINIMUM_REQUIRED(VERSION 3.28)
PROJECT(${LIBRARY_NAME} VERSION 0.0.1 LANGUAGES CXX)

SET(CMAKE_CXX_STANDARD 23)
SET(CMAKE_CXX_STANDARD_REQUIRED ON)

IF (POLICY CMP0048)
    CMAKE_POLICY(SET CMP0048 NEW)
ENDIF ()

# ------------- Library Setup --------------
SET(LUVK_SOURCE_BASE_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/src)
SET(LUVK_INCLUDE_BASE_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include/)

FILE(GLOB_RECURSE SOURCE_FILES CONFIGURE_DEPENDS "${LUVK_SOURCE_BASE_DIRECTORY}/*.cpp")
FILE(GLOB_RECURSE HEADER_FILES CONFIGURE_DEPENDS "${LUVK_INCLUDE_BASE_DIRECTORY}/luvk/**/*.hpp")

ADD_LIBRARY(${LIBRARY_NAME} SHARED ${SOURCE_FILES})
SET_TARGET_PROPERTIES(${LIBRARY_NAME} PROPERTIES LINKER_LANGUAGE CXX)

TARGET_INCLUDE_DIRECTORIES(${LIBRARY_NAME} PRIVATE ${LUVK_SOURCE_BASE_DIRECTORY})
TARGET_INCLUDE_DIRECTORIES(${LIBRARY_NAME} PUBLIC ${LUVK_INCLUDE_BASE_DIRECTORY})

TARGET_COMPILE_DEFINITIONS(${LIBRARY_NAME} PRIVATE BUILD_DLL)

IF (WIN32)
    TARGET_COMPILE_DEFINITIONS(${LIBRARY_NAME} PUBLIC VK_ENABLE_PLATFORM_WIN32_KHR)
ELSEIF (UNIX AND NOT APPLE)
    TARGET_COMPILE_DEFINITIONS(${LIBRARY_NAME} PUBLIC VK_USE_PLATFORM_XCB_KHR)
ENDIF()

IF (WIN32)
    SET(VOLK_STATIC_DEFINES VK_USE_PLATFORM_WIN32_KHR)
ELSEIF (MACOS)
    SET(VOLK_STATIC_DEFINES VK_USE_PLATFORM_MACOS_MVK)
ELSEIF (UNIX)
    SET(VOLK_STATIC_DEFINES VK_USE_PLATFORM_XCB_KHR)
ENDIF (WIN32)

TARGET_COMPILE_DEFINITIONS(${LIBRARY_NAME} PUBLIC VK_NO_PROTOTYPES=1)
TARGET_COMPILE_DEFINITIONS(${LIBRARY_NAME} PUBLIC VMA_STATIC_VULKAN_FUNCTIONS=0)
TARGET_COMPILE_DEFINITIONS(${LIBRARY_NAME} PUBLIC VMA_DYNAMIC_VULKAN_FUNCTIONS=1)

IF (WIN32)
    SET(VULKAN_SDK_LIB_DIR "$ENV{VULKAN_SDK}\\Lib")
    SET(VULKAN_SDK_INCLUDE_DIR "$ENV{VULKAN_SDK}/Include")
ELSE ()
    SET(VULKAN_SDK_LIB_DIR "$ENV{VULKAN_SDK}/lib")
    SET(VULKAN_SDK_INCLUDE_DIR "$ENV{VULKAN_SDK}/include")
ENDIF ()

LIST(APPEND LUVK_VULKAN_LIBS_TO_LINK
        volk
        SPIRV-Tools
        SPIRV-Tools-opt
        GenericCodeGen
        glslang
        glslang-default-resource-limits
        MachineIndependent
        OSDependent
        SPIRV
)

MACRO(LUVK_UTIL_LINK_TO_VK_LIB VK_LIB_ARG)
    IF (WIN32)
        IF (CMAKE_BUILD_TYPE MATCHES "Debug")
            SET(_LUVK_INT_LIB_PATH ${VULKAN_SDK_LIB_DIR}\\${VK_LIB_ARG}d.lib)
        ELSE ()
            SET(_LUVK_INT_LIB_PATH ${VULKAN_SDK_LIB_DIR}\\${VK_LIB_ARG}.lib)
        ENDIF ()
    ELSE ()
        UNSET(_LUVK_INT_LIB_PATH CACHE)
        UNSET(_LUVK_INT_LIB_PATH)
        FIND_LIBRARY(_LUVK_INT_LIB_PATH ${VK_LIB_ARG} HINTS ${VULKAN_SDK_LIB_DIR} NO_DEFAULT_PATH NO_CACHE)
    ENDIF ()

    MESSAGE(STATUS "Linking library '${LIBRARY_NAME}' to Vulkan lib '${_LUVK_INT_LIB_PATH}'")
    TARGET_LINK_LIBRARIES(${LIBRARY_NAME} PUBLIC ${_LUVK_INT_LIB_PATH})
ENDMACRO()

FOREACH (VkLib ${LUVK_VULKAN_LIBS_TO_LINK})
    LUVK_UTIL_LINK_TO_VK_LIB(${VkLib})
ENDFOREACH ()

TARGET_INCLUDE_DIRECTORIES(${LIBRARY_NAME} PUBLIC ${VULKAN_SDK_INCLUDE_DIR})
